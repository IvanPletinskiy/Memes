package com.handen.memes;

import android.annotation.SuppressLint;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.os.AsyncTask;
import android.os.Handler;
import android.os.HandlerThread;
import android.os.Message;
import android.support.annotation.Nullable;

import com.handen.memes.database.Database;
import com.vk.sdk.api.VKApi;
import com.vk.sdk.api.VKApiConst;
import com.vk.sdk.api.VKBatchRequest;
import com.vk.sdk.api.VKParameters;
import com.vk.sdk.api.VKRequest;
import com.vk.sdk.api.VKResponse;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.io.IOException;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;

/**
 * Created by Vanya on 29.05.2018.
 */

public class PostDownloader<T> extends HandlerThread implements PostsPreparedListener {

    private static final int MESSSAGE_DOWNLOAD = 0;
    private Handler mRequestHandler;
    private Handler mResponseHandler;
    private ConcurrentMap<T, Integer> mRequestMap = new ConcurrentHashMap<>();

    public void setPostDownloaderListener(PostDownloaderListener<T> listener) {
        postDownloaderListener = listener;
    }

    @SuppressLint("HandlerLeak")
    @Override
    protected void onLooperPrepared() {
        mRequestHandler = new Handler() {
            @Override
            public void handleMessage(Message msg) {
                if(msg.what == MESSSAGE_DOWNLOAD) {
                    T target = (T) msg.obj;
                    handleRequest(target);
                }
            }
        };
    }

    public void getPost(T target, @Nullable Integer offset) {

        if(offset == null) {
            mRequestMap.remove(target);
        }
        else {
            mRequestMap.put(target, offset);
            mRequestHandler.obtainMessage(MESSSAGE_DOWNLOAD, target).sendToTarget();
        }
    }

    private void handleRequest(T target) {
        int offset = mRequestMap.get(target);
        long currentMillis = new Date().getTime();
        long period = Preferences.getPeriod();
        long endPeriodMillis = currentMillis - (offset + 1) * period;

        ArrayList<Group> groups = Database.getGroupsIds();

        ArrayList<VKRequest> requests = new ArrayList<>();
        for(Group g : groups) {
            if(g.getLastPostDownloadedMillis() < endPeriodMillis) {
                requests.add(generateRequest(g.getId(), g.getPostDownloadedCount()));
            }
        }

        if(requests.size() > 0) {
            generateAndSendBatch(requests, target);
        }
        else {
            onPostsPrepared(target);
        }
    }

    @Override
    public void onPostsPrepared(Object target) {
        int offset = mRequestMap.get((T) target);
        Post post = choosePost(getPeriodPosts(offset));
        new ImageDownloader(post, (T) target).execute();
    }

    public Bitmap downloadImage(String path) {
        try {
            java.net.URL url = new java.net.URL(path);
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.setDoInput(true);
            connection.connect();
            InputStream input = connection.getInputStream();
            Bitmap myBitmap = BitmapFactory.decodeStream(input);
            return myBitmap;
        }
        catch (IOException e) {
            e.printStackTrace();
            return null;
        }
    }

    private class ImageDownloader extends AsyncTask<Void, Void, Post> {
        private Post post;
        private T target;
        private Integer offset;

        public ImageDownloader(Post post, T target) {
            this.post = post;
            this.target = target;
            this.offset = mRequestMap.get(target);
        }

        @Override
        protected Post doInBackground(Void... voids) {
            if(post != null)
                post.setImage(downloadImage(post.getImageUrl()));
            return post;
        }

        @Override
        protected void onPostExecute(final Post post) {
            super.onPostExecute(post);
            mResponseHandler.post(new Runnable() {
                @Override
                public void run() {
                    if (mRequestMap.get(target) != (offset)) {
                        return;
                    }
                    mRequestMap.remove(target);
                    postDownloaderListener.onPostDownloaded(target, post);
                }
            });
        }
    }
}

